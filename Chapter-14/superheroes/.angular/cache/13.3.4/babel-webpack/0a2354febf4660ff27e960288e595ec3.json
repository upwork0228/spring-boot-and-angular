{"ast":null,"code":"import * as i3 from '@ngrx/store';\nimport { compose, ScannedActionsSubject, createAction } from '@ngrx/store';\nimport * as i1 from 'rxjs';\nimport { merge, Observable, Subject, defer, Notification, pipe, of } from 'rxjs';\nimport { ignoreElements, materialize, map, catchError, filter, groupBy, mergeMap, exhaustMap, dematerialize, take, concatMap, finalize, withLatestFrom } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, NgModule, Optional, Injector, SkipSelf, Self } from '@angular/core';\nconst DEFAULT_EFFECT_CONFIG = {\n  dispatch: true,\n  useEffectsErrorHandler: true\n};\nconst CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n/**\n * @description\n * Creates an effect from an `Observable` and an `EffectConfig`.\n *\n * @param source A function which returns an `Observable`.\n * @param config A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `useEffectsErrorHandler` is true.\n * @returns If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n *\n * @usageNotes\n *\n * ** Mapping to a different action **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     map(() => FeatureActions.actionTwo())\n *   )\n * );\n * ```\n *\n *  ** Non-dispatching effects **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     tap(() => console.log('Action One Dispatched'))\n *   ),\n *   { dispatch: false }\n *   // FeatureActions.actionOne is not dispatched\n * );\n * ```\n */\n\nfunction createEffect(source, config) {\n  const effect = source();\n  const value = Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config);\n  Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n    value\n  });\n  return effect;\n}\n\nfunction getCreateEffectMetadata(instance) {\n  const propertyNames = Object.getOwnPropertyNames(instance);\n  const metadata = propertyNames.filter(propertyName => {\n    if (instance[propertyName] && instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY)) {\n      // If the property type has overridden `hasOwnProperty` we need to ensure\n      // that the metadata is valid (containing a `dispatch`property)\n      // https://github.com/ngrx/platform/issues/2975\n      const property = instance[propertyName];\n      return property[CREATE_EFFECT_METADATA_KEY].hasOwnProperty('dispatch');\n    }\n\n    return false;\n  }).map(propertyName => {\n    const metaData = instance[propertyName][CREATE_EFFECT_METADATA_KEY];\n    return Object.assign({\n      propertyName\n    }, metaData);\n  });\n  return metadata;\n}\n\nfunction getSourceForInstance(instance) {\n  return Object.getPrototypeOf(instance);\n}\n\nconst METADATA_KEY = '__@ngrx/effects__';\n/**\n * @deprecated The Effect decorator (`@Effect`) is deprecated in favor for the `createEffect` method.\n * See the docs for more info {@link https://ngrx.io/guide/migration/v11#the-effect-decorator}\n */\n\nfunction Effect(config = {}) {\n  return function (target, propertyName) {\n    const metadata = Object.assign(Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config), {\n      propertyName\n    });\n    addEffectMetadataEntry(target, metadata);\n  };\n}\n\nfunction getEffectDecoratorMetadata(instance) {\n  const effectsDecorators = compose(getEffectMetadataEntries, getSourceForInstance)(instance);\n  return effectsDecorators;\n}\n/**\n * Type guard to detemine whether METADATA_KEY is already present on the Class\n * constructor\n */\n\n\nfunction hasMetadataEntries(sourceProto) {\n  return sourceProto.constructor.hasOwnProperty(METADATA_KEY);\n}\n/** Add Effect Metadata to the Effect Class constructor under specific key */\n\n\nfunction addEffectMetadataEntry(sourceProto, metadata) {\n  if (hasMetadataEntries(sourceProto)) {\n    sourceProto.constructor[METADATA_KEY].push(metadata);\n  } else {\n    Object.defineProperty(sourceProto.constructor, METADATA_KEY, {\n      value: [metadata]\n    });\n  }\n}\n\nfunction getEffectMetadataEntries(sourceProto) {\n  return hasMetadataEntries(sourceProto) ? sourceProto.constructor[METADATA_KEY] : [];\n}\n\nfunction getEffectsMetadata(instance) {\n  return getSourceMetadata(instance).reduce((acc, {\n    propertyName,\n    dispatch,\n    useEffectsErrorHandler\n  }) => {\n    acc[propertyName] = {\n      dispatch,\n      useEffectsErrorHandler\n    };\n    return acc;\n  }, {});\n}\n\nfunction getSourceMetadata(instance) {\n  const effects = [getEffectDecoratorMetadata, getCreateEffectMetadata];\n  return effects.reduce((sources, source) => sources.concat(source(instance)), []);\n}\n\nfunction mergeEffects(sourceInstance, globalErrorHandler, effectsErrorHandler) {\n  const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n  const observables$ = getSourceMetadata(sourceInstance).map(({\n    propertyName,\n    dispatch,\n    useEffectsErrorHandler\n  }) => {\n    const observable$ = typeof sourceInstance[propertyName] === 'function' ? sourceInstance[propertyName]() : sourceInstance[propertyName];\n    const effectAction$ = useEffectsErrorHandler ? effectsErrorHandler(observable$, globalErrorHandler) : observable$;\n\n    if (dispatch === false) {\n      return effectAction$.pipe(ignoreElements());\n    }\n\n    const materialized$ = effectAction$.pipe(materialize());\n    return materialized$.pipe(map(notification => ({\n      effect: sourceInstance[propertyName],\n      notification,\n      propertyName,\n      sourceName,\n      sourceInstance\n    })));\n  });\n  return merge(...observables$);\n}\n\nconst MAX_NUMBER_OF_RETRY_ATTEMPTS = 10;\n\nfunction defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft = MAX_NUMBER_OF_RETRY_ATTEMPTS) {\n  return observable$.pipe(catchError(error => {\n    if (errorHandler) errorHandler.handleError(error);\n\n    if (retryAttemptLeft <= 1) {\n      return observable$; // last attempt\n    } // Return observable that produces this particular effect\n\n\n    return defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft - 1);\n  }));\n}\n\nclass Actions extends Observable {\n  constructor(source) {\n    super();\n\n    if (source) {\n      this.source = source;\n    }\n  }\n\n  lift(operator) {\n    const observable = new Actions();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nActions.ɵfac = function Actions_Factory(t) {\n  return new (t || Actions)(i0.ɵɵinject(ScannedActionsSubject));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nActions.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Actions,\n  factory: Actions.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Actions, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Observable,\n      decorators: [{\n        type: Inject,\n        args: [ScannedActionsSubject]\n      }]\n    }];\n  }, null);\n})();\n/**\n * `ofType` filters an Observable of `Actions` into an Observable of the actions\n * whose type strings are passed to it.\n *\n * For example, if `actions` has type `Actions<AdditionAction|SubstractionAction>`, and\n * the type of the `Addition` action is `add`, then\n * `actions.pipe(ofType('add'))` returns an `Observable<AdditionAction>`.\n *\n * Properly typing this function is hard and requires some advanced TS tricks\n * below.\n *\n * Type narrowing automatically works, as long as your `actions` object\n * starts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n *\n * For backwards compatibility, when one passes a single type argument\n * `ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\n * completely overrides any possible inference from 'something'.\n *\n * Unfortunately, for unknown 'actions: Actions' these types will produce\n * 'Observable<never>'. In such cases one has to manually set the generic type\n * like `actions.ofType<AdditionAction>('add')`.\n *\n * @usageNotes\n *\n * Filter the Actions stream on the \"customers page loaded\" action\n *\n * ```ts\n * import { ofType } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  ofType(fromCustomers.pageLoaded)\n * )\n * ```\n */\n\n\nfunction ofType(...allowedTypes) {\n  return filter(action => allowedTypes.some(typeOrActionCreator => {\n    if (typeof typeOrActionCreator === 'string') {\n      // Comparing the string to type\n      return typeOrActionCreator === action.type;\n    } // We are filtering by ActionCreator\n\n\n    return typeOrActionCreator.type === action.type;\n  }));\n}\n\nfunction reportInvalidActions(output, reporter) {\n  if (output.notification.kind === 'N') {\n    const action = output.notification.value;\n    const isInvalidAction = !isAction(action);\n\n    if (isInvalidAction) {\n      reporter.handleError(new Error(`Effect ${getEffectName(output)} dispatched an invalid action: ${stringify(action)}`));\n    }\n  }\n}\n\nfunction isAction(action) {\n  return typeof action !== 'function' && action && action.type && typeof action.type === 'string';\n}\n\nfunction getEffectName({\n  propertyName,\n  sourceInstance,\n  sourceName\n}) {\n  const isMethod = typeof sourceInstance[propertyName] === 'function';\n  return `\"${sourceName}.${String(propertyName)}${isMethod ? '()' : ''}\"`;\n}\n\nfunction stringify(action) {\n  try {\n    return JSON.stringify(action);\n  } catch (_a) {\n    return action;\n  }\n}\n\nconst onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\n\nfunction isOnIdentifyEffects(instance) {\n  return isFunction(instance, onIdentifyEffectsKey);\n}\n\nconst onRunEffectsKey = 'ngrxOnRunEffects';\n\nfunction isOnRunEffects(instance) {\n  return isFunction(instance, onRunEffectsKey);\n}\n\nconst onInitEffects = 'ngrxOnInitEffects';\n\nfunction isOnInitEffects(instance) {\n  return isFunction(instance, onInitEffects);\n}\n\nfunction isFunction(instance, functionName) {\n  return instance && functionName in instance && typeof instance[functionName] === 'function';\n}\n\nconst _ROOT_EFFECTS_GUARD = new InjectionToken('@ngrx/effects Internal Root Guard');\n\nconst USER_PROVIDED_EFFECTS = new InjectionToken('@ngrx/effects User Provided Effects');\n\nconst _ROOT_EFFECTS = new InjectionToken('@ngrx/effects Internal Root Effects');\n\nconst ROOT_EFFECTS = new InjectionToken('@ngrx/effects Root Effects');\n\nconst _FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Internal Feature Effects');\n\nconst FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Feature Effects');\nconst EFFECTS_ERROR_HANDLER = new InjectionToken('@ngrx/effects Effects Error Handler');\n\nclass EffectSources extends Subject {\n  constructor(errorHandler, effectsErrorHandler) {\n    super();\n    this.errorHandler = errorHandler;\n    this.effectsErrorHandler = effectsErrorHandler;\n  }\n\n  addEffects(effectSourceInstance) {\n    this.next(effectSourceInstance);\n  }\n  /**\n   * @internal\n   */\n\n\n  toActions() {\n    return this.pipe(groupBy(getSourceForInstance), mergeMap(source$ => {\n      return source$.pipe(groupBy(effectsInstance));\n    }), mergeMap(source$ => {\n      const effect$ = source$.pipe(exhaustMap(sourceInstance => {\n        return resolveEffectSource(this.errorHandler, this.effectsErrorHandler)(sourceInstance);\n      }), map(output => {\n        reportInvalidActions(output, this.errorHandler);\n        return output.notification;\n      }), filter(notification => notification.kind === 'N' && notification.value != null), dematerialize()); // start the stream with an INIT action\n      // do this only for the first Effect instance\n\n      const init$ = source$.pipe(take(1), filter(isOnInitEffects), map(instance => instance.ngrxOnInitEffects()));\n      return merge(effect$, init$);\n    }));\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectSources.ɵfac = function EffectSources_Factory(t) {\n  return new (t || EffectSources)(i0.ɵɵinject(i0.ErrorHandler), i0.ɵɵinject(EFFECTS_ERROR_HANDLER));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectSources.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: EffectSources,\n  factory: EffectSources.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectSources, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [EFFECTS_ERROR_HANDLER]\n      }]\n    }];\n  }, null);\n})();\n\nfunction effectsInstance(sourceInstance) {\n  if (isOnIdentifyEffects(sourceInstance)) {\n    return sourceInstance.ngrxOnIdentifyEffects();\n  }\n\n  return '';\n}\n\nfunction resolveEffectSource(errorHandler, effectsErrorHandler) {\n  return sourceInstance => {\n    const mergedEffects$ = mergeEffects(sourceInstance, errorHandler, effectsErrorHandler);\n\n    if (isOnRunEffects(sourceInstance)) {\n      return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n    }\n\n    return mergedEffects$;\n  };\n}\n\nclass EffectsRunner {\n  constructor(effectSources, store) {\n    this.effectSources = effectSources;\n    this.store = store;\n    this.effectsSubscription = null;\n  }\n\n  start() {\n    if (!this.effectsSubscription) {\n      this.effectsSubscription = this.effectSources.toActions().subscribe(this.store);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.effectsSubscription) {\n      this.effectsSubscription.unsubscribe();\n      this.effectsSubscription = null;\n    }\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectsRunner.ɵfac = function EffectsRunner_Factory(t) {\n  return new (t || EffectsRunner)(i0.ɵɵinject(EffectSources), i0.ɵɵinject(i3.Store));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectsRunner.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: EffectsRunner,\n  factory: EffectsRunner.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsRunner, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: EffectSources\n    }, {\n      type: i3.Store\n    }];\n  }, null);\n})();\n\nconst ROOT_EFFECTS_INIT = '@ngrx/effects/init';\nconst rootEffectsInit = createAction(ROOT_EFFECTS_INIT);\n\nclass EffectsRootModule {\n  constructor(sources, runner, store, rootEffects, storeRootModule, storeFeatureModule, guard) {\n    this.sources = sources;\n    runner.start();\n    rootEffects.forEach(effectSourceInstance => sources.addEffects(effectSourceInstance));\n    store.dispatch({\n      type: ROOT_EFFECTS_INIT\n    });\n  }\n\n  addEffects(effectSourceInstance) {\n    this.sources.addEffects(effectSourceInstance);\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectsRootModule.ɵfac = function EffectsRootModule_Factory(t) {\n  return new (t || EffectsRootModule)(i0.ɵɵinject(EffectSources), i0.ɵɵinject(EffectsRunner), i0.ɵɵinject(i3.Store), i0.ɵɵinject(ROOT_EFFECTS), i0.ɵɵinject(i3.StoreRootModule, 8), i0.ɵɵinject(i3.StoreFeatureModule, 8), i0.ɵɵinject(_ROOT_EFFECTS_GUARD, 8));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectsRootModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EffectsRootModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nEffectsRootModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsRootModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: EffectSources\n    }, {\n      type: EffectsRunner\n    }, {\n      type: i3.Store\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ROOT_EFFECTS]\n      }]\n    }, {\n      type: i3.StoreRootModule,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.StoreFeatureModule,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [_ROOT_EFFECTS_GUARD]\n      }]\n    }];\n  }, null);\n})();\n\nclass EffectsFeatureModule {\n  constructor(root, effectSourceGroups, storeRootModule, storeFeatureModule) {\n    effectSourceGroups.forEach(group => group.forEach(effectSourceInstance => root.addEffects(effectSourceInstance)));\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectsFeatureModule.ɵfac = function EffectsFeatureModule_Factory(t) {\n  return new (t || EffectsFeatureModule)(i0.ɵɵinject(EffectsRootModule), i0.ɵɵinject(FEATURE_EFFECTS), i0.ɵɵinject(i3.StoreRootModule, 8), i0.ɵɵinject(i3.StoreFeatureModule, 8));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectsFeatureModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EffectsFeatureModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nEffectsFeatureModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsFeatureModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: EffectsRootModule\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [FEATURE_EFFECTS]\n      }]\n    }, {\n      type: i3.StoreRootModule,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.StoreFeatureModule,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nclass EffectsModule {\n  static forFeature(featureEffects = []) {\n    return {\n      ngModule: EffectsFeatureModule,\n      providers: [featureEffects, {\n        provide: _FEATURE_EFFECTS,\n        multi: true,\n        useValue: featureEffects\n      }, {\n        provide: USER_PROVIDED_EFFECTS,\n        multi: true,\n        useValue: []\n      }, {\n        provide: FEATURE_EFFECTS,\n        multi: true,\n        useFactory: createEffects,\n        deps: [Injector, _FEATURE_EFFECTS, USER_PROVIDED_EFFECTS]\n      }]\n    };\n  }\n\n  static forRoot(rootEffects = []) {\n    return {\n      ngModule: EffectsRootModule,\n      providers: [{\n        provide: EFFECTS_ERROR_HANDLER,\n        useValue: defaultEffectsErrorHandler\n      }, EffectsRunner, EffectSources, Actions, rootEffects, {\n        provide: _ROOT_EFFECTS,\n        useValue: [rootEffects]\n      }, {\n        provide: _ROOT_EFFECTS_GUARD,\n        useFactory: _provideForRootGuard,\n        deps: [[EffectsRunner, new Optional(), new SkipSelf()], [_ROOT_EFFECTS, new Self()]]\n      }, {\n        provide: USER_PROVIDED_EFFECTS,\n        multi: true,\n        useValue: []\n      }, {\n        provide: ROOT_EFFECTS,\n        useFactory: createEffects,\n        deps: [Injector, _ROOT_EFFECTS, USER_PROVIDED_EFFECTS]\n      }]\n    };\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectsModule.ɵfac = function EffectsModule_Factory(t) {\n  return new (t || EffectsModule)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nEffectsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: EffectsModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nEffectsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EffectsModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\nfunction createEffects(injector, effectGroups, userProvidedEffectGroups) {\n  const mergedEffects = [];\n\n  for (const effectGroup of effectGroups) {\n    mergedEffects.push(...effectGroup);\n  }\n\n  for (const userProvidedEffectGroup of userProvidedEffectGroups) {\n    mergedEffects.push(...userProvidedEffectGroup);\n  }\n\n  return createEffectInstances(injector, mergedEffects);\n}\n\nfunction createEffectInstances(injector, effects) {\n  return effects.map(effect => injector.get(effect));\n}\n\nfunction _provideForRootGuard(runner, rootEffects) {\n  // check whether any effects are actually passed\n  const hasEffects = !(rootEffects.length === 1 && rootEffects[0].length === 0);\n\n  if (hasEffects && runner) {\n    throw new TypeError(`EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.`);\n  }\n\n  return 'guarded';\n}\n/**\n * Wraps project fn with error handling making it safe to use in Effects.\n * Takes either a config with named properties that represent different possible\n * callbacks or project/error callbacks that are required.\n */\n\n\nfunction act(\n/** Allow to take either config object or project/error functions */\nconfigOrProject, errorFn) {\n  const {\n    project,\n    error,\n    complete,\n    operator,\n    unsubscribe\n  } = typeof configOrProject === 'function' ? {\n    project: configOrProject,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    error: errorFn,\n    operator: concatMap,\n    complete: undefined,\n    unsubscribe: undefined\n  } : Object.assign(Object.assign({}, configOrProject), {\n    operator: configOrProject.operator || concatMap\n  });\n  return source => defer(() => {\n    const subject = new Subject();\n    return merge(source.pipe(operator((input, index) => defer(() => {\n      let completed = false;\n      let errored = false;\n      let projectedCount = 0;\n      return project(input, index).pipe(materialize(), map(notification => {\n        switch (notification.kind) {\n          case 'E':\n            errored = true;\n            return new Notification('N', error(notification.error, input));\n\n          case 'C':\n            completed = true;\n            return complete ? new Notification('N', complete(projectedCount, input)) : undefined;\n\n          default:\n            ++projectedCount;\n            return notification;\n        }\n      }), filter(n => n != null), dematerialize(), finalize(() => {\n        if (!completed && !errored && unsubscribe) {\n          subject.next(unsubscribe(projectedCount, input));\n        }\n      }));\n    }))), subject);\n  });\n}\n/**\n * `concatLatestFrom` combines the source value\n * and the last available value from a lazily evaluated Observable\n * in a new array\n *\n * @usageNotes\n *\n * Select the active customer from the NgRx Store\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * as fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom(() => this.store.select(fromCustomers.selectActiveCustomer))\n * )\n * ```\n *\n * Select a customer from the NgRx Store by its id that is available on the action\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom((action) => this.store.select(fromCustomers.selectCustomer(action.customerId)))\n * )\n * ```\n */\n\n\nfunction concatLatestFrom(observablesFactory) {\n  return pipe(concatMap(value => {\n    const observables = observablesFactory(value);\n    const observablesAsArray = Array.isArray(observables) ? observables : [observables];\n    return of(value).pipe(withLatestFrom(...observablesAsArray));\n  }));\n}\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { Actions, EFFECTS_ERROR_HANDLER, Effect, EffectSources, EffectsFeatureModule, EffectsModule, EffectsRootModule, EffectsRunner, ROOT_EFFECTS_INIT, USER_PROVIDED_EFFECTS, act, concatLatestFrom, createEffect, defaultEffectsErrorHandler, getEffectsMetadata, mergeEffects, ofType, rootEffectsInit };","map":{"version":3,"sources":["/Users/devlinduldulao/Desktop/Books/Full-Stack-Web-Development-with-Spring-Boot-and-Angular/Chapter-14/superheroes/node_modules/@ngrx/effects/fesm2015/ngrx-effects.mjs"],"names":["i3","compose","ScannedActionsSubject","createAction","i1","merge","Observable","Subject","defer","Notification","pipe","of","ignoreElements","materialize","map","catchError","filter","groupBy","mergeMap","exhaustMap","dematerialize","take","concatMap","finalize","withLatestFrom","i0","Injectable","Inject","InjectionToken","NgModule","Optional","Injector","SkipSelf","Self","DEFAULT_EFFECT_CONFIG","dispatch","useEffectsErrorHandler","CREATE_EFFECT_METADATA_KEY","createEffect","source","config","effect","value","Object","assign","defineProperty","getCreateEffectMetadata","instance","propertyNames","getOwnPropertyNames","metadata","propertyName","hasOwnProperty","property","metaData","getSourceForInstance","getPrototypeOf","METADATA_KEY","Effect","target","addEffectMetadataEntry","getEffectDecoratorMetadata","effectsDecorators","getEffectMetadataEntries","hasMetadataEntries","sourceProto","constructor","push","getEffectsMetadata","getSourceMetadata","reduce","acc","effects","sources","concat","mergeEffects","sourceInstance","globalErrorHandler","effectsErrorHandler","sourceName","name","observables$","observable$","effectAction$","materialized$","notification","MAX_NUMBER_OF_RETRY_ATTEMPTS","defaultEffectsErrorHandler","errorHandler","retryAttemptLeft","error","handleError","Actions","lift","operator","observable","ɵfac","ɵprov","type","decorators","args","ofType","allowedTypes","action","some","typeOrActionCreator","reportInvalidActions","output","reporter","kind","isInvalidAction","isAction","Error","getEffectName","stringify","isMethod","String","JSON","_a","onIdentifyEffectsKey","isOnIdentifyEffects","isFunction","onRunEffectsKey","isOnRunEffects","onInitEffects","isOnInitEffects","functionName","_ROOT_EFFECTS_GUARD","USER_PROVIDED_EFFECTS","_ROOT_EFFECTS","ROOT_EFFECTS","_FEATURE_EFFECTS","FEATURE_EFFECTS","EFFECTS_ERROR_HANDLER","EffectSources","addEffects","effectSourceInstance","next","toActions","source$","effectsInstance","effect$","resolveEffectSource","init$","ngrxOnInitEffects","ErrorHandler","undefined","ngrxOnIdentifyEffects","mergedEffects$","ngrxOnRunEffects","EffectsRunner","effectSources","store","effectsSubscription","start","subscribe","ngOnDestroy","unsubscribe","Store","ROOT_EFFECTS_INIT","rootEffectsInit","EffectsRootModule","runner","rootEffects","storeRootModule","storeFeatureModule","guard","forEach","StoreRootModule","StoreFeatureModule","ɵmod","ɵinj","EffectsFeatureModule","root","effectSourceGroups","group","EffectsModule","forFeature","featureEffects","ngModule","providers","provide","multi","useValue","useFactory","createEffects","deps","forRoot","_provideForRootGuard","injector","effectGroups","userProvidedEffectGroups","mergedEffects","effectGroup","userProvidedEffectGroup","createEffectInstances","get","hasEffects","length","TypeError","act","configOrProject","errorFn","project","complete","subject","input","index","completed","errored","projectedCount","n","concatLatestFrom","observablesFactory","observables","observablesAsArray","Array","isArray"],"mappings":"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","sourcesContent":["import * as i3 from '@ngrx/store';\nimport { compose, ScannedActionsSubject, createAction } from '@ngrx/store';\nimport * as i1 from 'rxjs';\nimport { merge, Observable, Subject, defer, Notification, pipe, of } from 'rxjs';\nimport { ignoreElements, materialize, map, catchError, filter, groupBy, mergeMap, exhaustMap, dematerialize, take, concatMap, finalize, withLatestFrom } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, NgModule, Optional, Injector, SkipSelf, Self } from '@angular/core';\n\nconst DEFAULT_EFFECT_CONFIG = {\n    dispatch: true,\n    useEffectsErrorHandler: true,\n};\nconst CREATE_EFFECT_METADATA_KEY = '__@ngrx/effects_create__';\n\n/**\n * @description\n * Creates an effect from an `Observable` and an `EffectConfig`.\n *\n * @param source A function which returns an `Observable`.\n * @param config A `Partial<EffectConfig>` to configure the effect.  By default, `dispatch` is true and `useEffectsErrorHandler` is true.\n * @returns If `EffectConfig`#`dispatch` is true, returns `Observable<Action>`.  Else, returns `Observable<unknown>`.\n *\n * @usageNotes\n *\n * ** Mapping to a different action **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     map(() => FeatureActions.actionTwo())\n *   )\n * );\n * ```\n *\n *  ** Non-dispatching effects **\n * ```ts\n * effectName$ = createEffect(\n *   () => this.actions$.pipe(\n *     ofType(FeatureActions.actionOne),\n *     tap(() => console.log('Action One Dispatched'))\n *   ),\n *   { dispatch: false }\n *   // FeatureActions.actionOne is not dispatched\n * );\n * ```\n */\nfunction createEffect(source, config) {\n    const effect = source();\n    const value = Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config);\n    Object.defineProperty(effect, CREATE_EFFECT_METADATA_KEY, {\n        value,\n    });\n    return effect;\n}\nfunction getCreateEffectMetadata(instance) {\n    const propertyNames = Object.getOwnPropertyNames(instance);\n    const metadata = propertyNames\n        .filter((propertyName) => {\n        if (instance[propertyName] &&\n            instance[propertyName].hasOwnProperty(CREATE_EFFECT_METADATA_KEY)) {\n            // If the property type has overridden `hasOwnProperty` we need to ensure\n            // that the metadata is valid (containing a `dispatch`property)\n            // https://github.com/ngrx/platform/issues/2975\n            const property = instance[propertyName];\n            return property[CREATE_EFFECT_METADATA_KEY].hasOwnProperty('dispatch');\n        }\n        return false;\n    })\n        .map((propertyName) => {\n        const metaData = instance[propertyName][CREATE_EFFECT_METADATA_KEY];\n        return Object.assign({ propertyName }, metaData);\n    });\n    return metadata;\n}\n\nfunction getSourceForInstance(instance) {\n    return Object.getPrototypeOf(instance);\n}\n\nconst METADATA_KEY = '__@ngrx/effects__';\n/**\n * @deprecated The Effect decorator (`@Effect`) is deprecated in favor for the `createEffect` method.\n * See the docs for more info {@link https://ngrx.io/guide/migration/v11#the-effect-decorator}\n */\nfunction Effect(config = {}) {\n    return function (target, propertyName) {\n        const metadata = Object.assign(Object.assign(Object.assign({}, DEFAULT_EFFECT_CONFIG), config), { propertyName });\n        addEffectMetadataEntry(target, metadata);\n    };\n}\nfunction getEffectDecoratorMetadata(instance) {\n    const effectsDecorators = compose(getEffectMetadataEntries, getSourceForInstance)(instance);\n    return effectsDecorators;\n}\n/**\n * Type guard to detemine whether METADATA_KEY is already present on the Class\n * constructor\n */\nfunction hasMetadataEntries(sourceProto) {\n    return sourceProto.constructor.hasOwnProperty(METADATA_KEY);\n}\n/** Add Effect Metadata to the Effect Class constructor under specific key */\nfunction addEffectMetadataEntry(sourceProto, metadata) {\n    if (hasMetadataEntries(sourceProto)) {\n        sourceProto.constructor[METADATA_KEY].push(metadata);\n    }\n    else {\n        Object.defineProperty(sourceProto.constructor, METADATA_KEY, {\n            value: [metadata],\n        });\n    }\n}\nfunction getEffectMetadataEntries(sourceProto) {\n    return hasMetadataEntries(sourceProto)\n        ? sourceProto.constructor[METADATA_KEY]\n        : [];\n}\n\nfunction getEffectsMetadata(instance) {\n    return getSourceMetadata(instance).reduce((acc, { propertyName, dispatch, useEffectsErrorHandler }) => {\n        acc[propertyName] = { dispatch, useEffectsErrorHandler };\n        return acc;\n    }, {});\n}\nfunction getSourceMetadata(instance) {\n    const effects = [\n        getEffectDecoratorMetadata,\n        getCreateEffectMetadata,\n    ];\n    return effects.reduce((sources, source) => sources.concat(source(instance)), []);\n}\n\nfunction mergeEffects(sourceInstance, globalErrorHandler, effectsErrorHandler) {\n    const sourceName = getSourceForInstance(sourceInstance).constructor.name;\n    const observables$ = getSourceMetadata(sourceInstance).map(({ propertyName, dispatch, useEffectsErrorHandler, }) => {\n        const observable$ = typeof sourceInstance[propertyName] === 'function'\n            ? sourceInstance[propertyName]()\n            : sourceInstance[propertyName];\n        const effectAction$ = useEffectsErrorHandler\n            ? effectsErrorHandler(observable$, globalErrorHandler)\n            : observable$;\n        if (dispatch === false) {\n            return effectAction$.pipe(ignoreElements());\n        }\n        const materialized$ = effectAction$.pipe(materialize());\n        return materialized$.pipe(map((notification) => ({\n            effect: sourceInstance[propertyName],\n            notification,\n            propertyName,\n            sourceName,\n            sourceInstance,\n        })));\n    });\n    return merge(...observables$);\n}\n\nconst MAX_NUMBER_OF_RETRY_ATTEMPTS = 10;\nfunction defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft = MAX_NUMBER_OF_RETRY_ATTEMPTS) {\n    return observable$.pipe(catchError((error) => {\n        if (errorHandler)\n            errorHandler.handleError(error);\n        if (retryAttemptLeft <= 1) {\n            return observable$; // last attempt\n        }\n        // Return observable that produces this particular effect\n        return defaultEffectsErrorHandler(observable$, errorHandler, retryAttemptLeft - 1);\n    }));\n}\n\nclass Actions extends Observable {\n    constructor(source) {\n        super();\n        if (source) {\n            this.source = source;\n        }\n    }\n    lift(operator) {\n        const observable = new Actions();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n}\n/** @nocollapse */ /** @nocollapse */ Actions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: Actions, deps: [{ token: ScannedActionsSubject }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ /** @nocollapse */ Actions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: Actions });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: Actions, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i1.Observable, decorators: [{\n                        type: Inject,\n                        args: [ScannedActionsSubject]\n                    }] }];\n    } });\n/**\n * `ofType` filters an Observable of `Actions` into an Observable of the actions\n * whose type strings are passed to it.\n *\n * For example, if `actions` has type `Actions<AdditionAction|SubstractionAction>`, and\n * the type of the `Addition` action is `add`, then\n * `actions.pipe(ofType('add'))` returns an `Observable<AdditionAction>`.\n *\n * Properly typing this function is hard and requires some advanced TS tricks\n * below.\n *\n * Type narrowing automatically works, as long as your `actions` object\n * starts with a `Actions<SomeUnionOfActions>` instead of generic `Actions`.\n *\n * For backwards compatibility, when one passes a single type argument\n * `ofType<T>('something')` the result is an `Observable<T>`. Note, that `T`\n * completely overrides any possible inference from 'something'.\n *\n * Unfortunately, for unknown 'actions: Actions' these types will produce\n * 'Observable<never>'. In such cases one has to manually set the generic type\n * like `actions.ofType<AdditionAction>('add')`.\n *\n * @usageNotes\n *\n * Filter the Actions stream on the \"customers page loaded\" action\n *\n * ```ts\n * import { ofType } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  ofType(fromCustomers.pageLoaded)\n * )\n * ```\n */\nfunction ofType(...allowedTypes) {\n    return filter((action) => allowedTypes.some((typeOrActionCreator) => {\n        if (typeof typeOrActionCreator === 'string') {\n            // Comparing the string to type\n            return typeOrActionCreator === action.type;\n        }\n        // We are filtering by ActionCreator\n        return typeOrActionCreator.type === action.type;\n    }));\n}\n\nfunction reportInvalidActions(output, reporter) {\n    if (output.notification.kind === 'N') {\n        const action = output.notification.value;\n        const isInvalidAction = !isAction(action);\n        if (isInvalidAction) {\n            reporter.handleError(new Error(`Effect ${getEffectName(output)} dispatched an invalid action: ${stringify(action)}`));\n        }\n    }\n}\nfunction isAction(action) {\n    return (typeof action !== 'function' &&\n        action &&\n        action.type &&\n        typeof action.type === 'string');\n}\nfunction getEffectName({ propertyName, sourceInstance, sourceName, }) {\n    const isMethod = typeof sourceInstance[propertyName] === 'function';\n    return `\"${sourceName}.${String(propertyName)}${isMethod ? '()' : ''}\"`;\n}\nfunction stringify(action) {\n    try {\n        return JSON.stringify(action);\n    }\n    catch (_a) {\n        return action;\n    }\n}\n\nconst onIdentifyEffectsKey = 'ngrxOnIdentifyEffects';\nfunction isOnIdentifyEffects(instance) {\n    return isFunction(instance, onIdentifyEffectsKey);\n}\nconst onRunEffectsKey = 'ngrxOnRunEffects';\nfunction isOnRunEffects(instance) {\n    return isFunction(instance, onRunEffectsKey);\n}\nconst onInitEffects = 'ngrxOnInitEffects';\nfunction isOnInitEffects(instance) {\n    return isFunction(instance, onInitEffects);\n}\nfunction isFunction(instance, functionName) {\n    return (instance &&\n        functionName in instance &&\n        typeof instance[functionName] === 'function');\n}\n\nconst _ROOT_EFFECTS_GUARD = new InjectionToken('@ngrx/effects Internal Root Guard');\nconst USER_PROVIDED_EFFECTS = new InjectionToken('@ngrx/effects User Provided Effects');\nconst _ROOT_EFFECTS = new InjectionToken('@ngrx/effects Internal Root Effects');\nconst ROOT_EFFECTS = new InjectionToken('@ngrx/effects Root Effects');\nconst _FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Internal Feature Effects');\nconst FEATURE_EFFECTS = new InjectionToken('@ngrx/effects Feature Effects');\nconst EFFECTS_ERROR_HANDLER = new InjectionToken('@ngrx/effects Effects Error Handler');\n\nclass EffectSources extends Subject {\n    constructor(errorHandler, effectsErrorHandler) {\n        super();\n        this.errorHandler = errorHandler;\n        this.effectsErrorHandler = effectsErrorHandler;\n    }\n    addEffects(effectSourceInstance) {\n        this.next(effectSourceInstance);\n    }\n    /**\n     * @internal\n     */\n    toActions() {\n        return this.pipe(groupBy(getSourceForInstance), mergeMap((source$) => {\n            return source$.pipe(groupBy(effectsInstance));\n        }), mergeMap((source$) => {\n            const effect$ = source$.pipe(exhaustMap((sourceInstance) => {\n                return resolveEffectSource(this.errorHandler, this.effectsErrorHandler)(sourceInstance);\n            }), map((output) => {\n                reportInvalidActions(output, this.errorHandler);\n                return output.notification;\n            }), filter((notification) => notification.kind === 'N' && notification.value != null), dematerialize());\n            // start the stream with an INIT action\n            // do this only for the first Effect instance\n            const init$ = source$.pipe(take(1), filter(isOnInitEffects), map((instance) => instance.ngrxOnInitEffects()));\n            return merge(effect$, init$);\n        }));\n    }\n}\n/** @nocollapse */ /** @nocollapse */ EffectSources.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectSources, deps: [{ token: i0.ErrorHandler }, { token: EFFECTS_ERROR_HANDLER }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ /** @nocollapse */ EffectSources.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectSources });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectSources, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () {\n        return [{ type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [EFFECTS_ERROR_HANDLER]\n                    }] }];\n    } });\nfunction effectsInstance(sourceInstance) {\n    if (isOnIdentifyEffects(sourceInstance)) {\n        return sourceInstance.ngrxOnIdentifyEffects();\n    }\n    return '';\n}\nfunction resolveEffectSource(errorHandler, effectsErrorHandler) {\n    return (sourceInstance) => {\n        const mergedEffects$ = mergeEffects(sourceInstance, errorHandler, effectsErrorHandler);\n        if (isOnRunEffects(sourceInstance)) {\n            return sourceInstance.ngrxOnRunEffects(mergedEffects$);\n        }\n        return mergedEffects$;\n    };\n}\n\nclass EffectsRunner {\n    constructor(effectSources, store) {\n        this.effectSources = effectSources;\n        this.store = store;\n        this.effectsSubscription = null;\n    }\n    start() {\n        if (!this.effectsSubscription) {\n            this.effectsSubscription = this.effectSources\n                .toActions()\n                .subscribe(this.store);\n        }\n    }\n    ngOnDestroy() {\n        if (this.effectsSubscription) {\n            this.effectsSubscription.unsubscribe();\n            this.effectsSubscription = null;\n        }\n    }\n}\n/** @nocollapse */ /** @nocollapse */ EffectsRunner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsRunner, deps: [{ token: EffectSources }, { token: i3.Store }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ /** @nocollapse */ EffectsRunner.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsRunner });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsRunner, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: EffectSources }, { type: i3.Store }]; } });\n\nconst ROOT_EFFECTS_INIT = '@ngrx/effects/init';\nconst rootEffectsInit = createAction(ROOT_EFFECTS_INIT);\nclass EffectsRootModule {\n    constructor(sources, runner, store, rootEffects, storeRootModule, storeFeatureModule, guard) {\n        this.sources = sources;\n        runner.start();\n        rootEffects.forEach((effectSourceInstance) => sources.addEffects(effectSourceInstance));\n        store.dispatch({ type: ROOT_EFFECTS_INIT });\n    }\n    addEffects(effectSourceInstance) {\n        this.sources.addEffects(effectSourceInstance);\n    }\n}\n/** @nocollapse */ /** @nocollapse */ EffectsRootModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsRootModule, deps: [{ token: EffectSources }, { token: EffectsRunner }, { token: i3.Store }, { token: ROOT_EFFECTS }, { token: i3.StoreRootModule, optional: true }, { token: i3.StoreFeatureModule, optional: true }, { token: _ROOT_EFFECTS_GUARD, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ /** @nocollapse */ EffectsRootModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsRootModule });\n/** @nocollapse */ /** @nocollapse */ EffectsRootModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsRootModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsRootModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () {\n        return [{ type: EffectSources }, { type: EffectsRunner }, { type: i3.Store }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [ROOT_EFFECTS]\n                    }] }, { type: i3.StoreRootModule, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.StoreFeatureModule, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [_ROOT_EFFECTS_GUARD]\n                    }] }];\n    } });\n\nclass EffectsFeatureModule {\n    constructor(root, effectSourceGroups, storeRootModule, storeFeatureModule) {\n        effectSourceGroups.forEach((group) => group.forEach((effectSourceInstance) => root.addEffects(effectSourceInstance)));\n    }\n}\n/** @nocollapse */ /** @nocollapse */ EffectsFeatureModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsFeatureModule, deps: [{ token: EffectsRootModule }, { token: FEATURE_EFFECTS }, { token: i3.StoreRootModule, optional: true }, { token: i3.StoreFeatureModule, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ /** @nocollapse */ EffectsFeatureModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsFeatureModule });\n/** @nocollapse */ /** @nocollapse */ EffectsFeatureModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsFeatureModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsFeatureModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () {\n        return [{ type: EffectsRootModule }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [FEATURE_EFFECTS]\n                    }] }, { type: i3.StoreRootModule, decorators: [{\n                        type: Optional\n                    }] }, { type: i3.StoreFeatureModule, decorators: [{\n                        type: Optional\n                    }] }];\n    } });\n\nclass EffectsModule {\n    static forFeature(featureEffects = []) {\n        return {\n            ngModule: EffectsFeatureModule,\n            providers: [\n                featureEffects,\n                {\n                    provide: _FEATURE_EFFECTS,\n                    multi: true,\n                    useValue: featureEffects,\n                },\n                {\n                    provide: USER_PROVIDED_EFFECTS,\n                    multi: true,\n                    useValue: [],\n                },\n                {\n                    provide: FEATURE_EFFECTS,\n                    multi: true,\n                    useFactory: createEffects,\n                    deps: [Injector, _FEATURE_EFFECTS, USER_PROVIDED_EFFECTS],\n                },\n            ],\n        };\n    }\n    static forRoot(rootEffects = []) {\n        return {\n            ngModule: EffectsRootModule,\n            providers: [\n                {\n                    provide: EFFECTS_ERROR_HANDLER,\n                    useValue: defaultEffectsErrorHandler,\n                },\n                EffectsRunner,\n                EffectSources,\n                Actions,\n                rootEffects,\n                {\n                    provide: _ROOT_EFFECTS,\n                    useValue: [rootEffects],\n                },\n                {\n                    provide: _ROOT_EFFECTS_GUARD,\n                    useFactory: _provideForRootGuard,\n                    deps: [\n                        [EffectsRunner, new Optional(), new SkipSelf()],\n                        [_ROOT_EFFECTS, new Self()],\n                    ],\n                },\n                {\n                    provide: USER_PROVIDED_EFFECTS,\n                    multi: true,\n                    useValue: [],\n                },\n                {\n                    provide: ROOT_EFFECTS,\n                    useFactory: createEffects,\n                    deps: [Injector, _ROOT_EFFECTS, USER_PROVIDED_EFFECTS],\n                },\n            ],\n        };\n    }\n}\n/** @nocollapse */ /** @nocollapse */ EffectsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ /** @nocollapse */ EffectsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsModule });\n/** @nocollapse */ /** @nocollapse */ EffectsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: EffectsModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\nfunction createEffects(injector, effectGroups, userProvidedEffectGroups) {\n    const mergedEffects = [];\n    for (const effectGroup of effectGroups) {\n        mergedEffects.push(...effectGroup);\n    }\n    for (const userProvidedEffectGroup of userProvidedEffectGroups) {\n        mergedEffects.push(...userProvidedEffectGroup);\n    }\n    return createEffectInstances(injector, mergedEffects);\n}\nfunction createEffectInstances(injector, effects) {\n    return effects.map((effect) => injector.get(effect));\n}\nfunction _provideForRootGuard(runner, rootEffects) {\n    // check whether any effects are actually passed\n    const hasEffects = !(rootEffects.length === 1 && rootEffects[0].length === 0);\n    if (hasEffects && runner) {\n        throw new TypeError(`EffectsModule.forRoot() called twice. Feature modules should use EffectsModule.forFeature() instead.`);\n    }\n    return 'guarded';\n}\n\n/**\n * Wraps project fn with error handling making it safe to use in Effects.\n * Takes either a config with named properties that represent different possible\n * callbacks or project/error callbacks that are required.\n */\nfunction act(\n/** Allow to take either config object or project/error functions */\nconfigOrProject, errorFn) {\n    const { project, error, complete, operator, unsubscribe } = typeof configOrProject === 'function'\n        ? {\n            project: configOrProject,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            error: errorFn,\n            operator: concatMap,\n            complete: undefined,\n            unsubscribe: undefined,\n        }\n        : Object.assign(Object.assign({}, configOrProject), { operator: configOrProject.operator || concatMap });\n    return (source) => defer(() => {\n        const subject = new Subject();\n        return merge(source.pipe(operator((input, index) => defer(() => {\n            let completed = false;\n            let errored = false;\n            let projectedCount = 0;\n            return project(input, index).pipe(materialize(), map((notification) => {\n                switch (notification.kind) {\n                    case 'E':\n                        errored = true;\n                        return new Notification('N', error(notification.error, input));\n                    case 'C':\n                        completed = true;\n                        return complete\n                            ? new Notification('N', complete(projectedCount, input))\n                            : undefined;\n                    default:\n                        ++projectedCount;\n                        return notification;\n                }\n            }), filter((n) => n != null), dematerialize(), finalize(() => {\n                if (!completed && !errored && unsubscribe) {\n                    subject.next(unsubscribe(projectedCount, input));\n                }\n            }));\n        }))), subject);\n    });\n}\n\n/**\n * `concatLatestFrom` combines the source value\n * and the last available value from a lazily evaluated Observable\n * in a new array\n *\n * @usageNotes\n *\n * Select the active customer from the NgRx Store\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * as fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom(() => this.store.select(fromCustomers.selectActiveCustomer))\n * )\n * ```\n *\n * Select a customer from the NgRx Store by its id that is available on the action\n *\n * ```ts\n * import { concatLatestFrom } from '@ngrx/effects';\n * import * fromCustomers from '../customers';\n *\n * this.actions$.pipe(\n *  concatLatestFrom((action) => this.store.select(fromCustomers.selectCustomer(action.customerId)))\n * )\n * ```\n */\nfunction concatLatestFrom(observablesFactory) {\n    return pipe(concatMap((value) => {\n        const observables = observablesFactory(value);\n        const observablesAsArray = Array.isArray(observables)\n            ? observables\n            : [observables];\n        return of(value).pipe(withLatestFrom(...observablesAsArray));\n    }));\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Actions, EFFECTS_ERROR_HANDLER, Effect, EffectSources, EffectsFeatureModule, EffectsModule, EffectsRootModule, EffectsRunner, ROOT_EFFECTS_INIT, USER_PROVIDED_EFFECTS, act, concatLatestFrom, createEffect, defaultEffectsErrorHandler, getEffectsMetadata, mergeEffects, ofType, rootEffectsInit };\n"]},"metadata":{},"sourceType":"module"}